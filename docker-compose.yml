services:
  postgres:
    image: postgres:17-alpine
    container_name: sleeper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sleeper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sleeper_password}
      POSTGRES_DB: ${POSTGRES_DB:-sleeper_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sleeper_user} -d ${POSTGRES_DB:-sleeper_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sleeper-net

  hasura:
    image: hasura/graphql-engine:v2.36.0.cli-migrations-v3
    container_name: sleeper-hasura
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER:-sleeper_user}:${POSTGRES_PASSWORD:-sleeper_password}@postgres:5432/${POSTGRES_DB:-sleeper_db}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET:-changeme}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER:-sleeper_user}:${POSTGRES_PASSWORD:-sleeper_password}@postgres:5432/${POSTGRES_DB:-sleeper_db}
      HASURA_GRAPHQL_METADATA_DIR: /hasura-metadata
      ACTION_SECRET: ${ACTION_SECRET:-changeme}
    volumes:
      - ./hasura/metadata:/hasura-metadata:ro
      - ./hasura/migrations:/hasura-migrations:ro
    networks:
      - sleeper-net

  docs:
    build:
      context: ./docs
      dockerfile: Dockerfile
    container_name: sleeper-docs
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - sleeper-net

  actions:
    build:
      context: ./actions-service
      dockerfile: Dockerfile
    container_name: sleeper-actions
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      PORT: 8080
      ACTION_SECRET: ${ACTION_SECRET:-changeme}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - sleeper-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  sleeper-net:
    driver: bridge

volumes:
  postgres_data: